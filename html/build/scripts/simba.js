// Generated by CoffeeScript 1.9.3
(function() {
  var duplicateElements,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  duplicateElements = function() {
    var curr, el, elements, i, len, parent, results, times;
    elements = $('[duplicate]');
    results = [];
    for (i = 0, len = elements.length; i < len; i++) {
      el = elements[i];
      times = parseInt($(el).attr('duplicate'));
      curr = 0;
      parent = $(el).parent();
      results.push((function() {
        var results1;
        results1 = [];
        while (curr < times - 1) {
          parent.append($(el).clone());
          results1.push(curr++);
        }
        return results1;
      })());
    }
    return results;
  };

  $(document).ready(function() {
    var CD_TIMER, Detail, Paginator, PrimaryHeader, Slider, cmd, currDisplayIndex, currDisplayPage, currPage, currPageIndex, detailCtrl, headerCtrl, i, invl_id, isTouchPan, leapController, leapLoopClock, len, loading_id, mc, mc_detail, mc_slider, page, page_move, page_slide, pages, paginatorCtrl, sliderCtrl, stopPagesAnim, svgSet, totalPages, touchStatus, touch_detail, touch_pages, touch_slider, viewStatus, wheeltimer;
    svgSet = new svgSprites();
    svgSet.load('../styles/svgdefs.svg', 'base');
    svgSet.render();
    duplicateElements();
    viewStatus = 0;
    touchStatus = 0;
    PrimaryHeader = function() {
      var logo, self, svg;
      self = this;
      svg = $('#menu').find('svg');
      logo = $('#logo').find('svg');
      this.menu = function(type) {
        var new_sprite, old_sprite;
        if (viewStatus !== 0 || !type) {
          viewStatus = 0;
          new_sprite = svg.data('last');
          if (new_sprite) {
            svg.data('last', '');
            svg.attr('svg-sprite', new_sprite);
            svgSet.render(svg);
          }
          return logo.removeClass('hide');
        } else {
          viewStatus = type === 'close' ? 1 : 2;
          new_sprite = svg.data(type);
          old_sprite = svg.attr('svg-sprite') || '';
          svg.data('last', old_sprite);
          svg.attr('svg-sprite', new_sprite);
          svgSet.render(svg);
          if (viewStatus === 2) {
            return logo.addClass('hide');
          } else {
            return logo.removeClass('hide');
          }
        }
      };
      this.show = function() {
        if (currDisplayPage.attr('dark') !== null && viewStatus !== 1) {
          return $('#header').addClass('dark');
        } else {
          return $('#header').removeClass('dark');
        }
      };
      return this;
    };
    Detail = function() {
      var detail, self;
      self = this;
      detail = $('#detail');
      this.show = function(content) {
        if (currPage.attr('dark') !== null) {
          detail.addClass('dark');
        } else {
          detail.removeClass('dark');
        }
        detail.html(content);
        return detail.addClass('open');
      };
      this.hide = function() {
        return detail.removeClass('open');
      };
      this.toggle = function() {
        if (detail.hasClass('open')) {
          return self.hide();
        } else {
          return self.show();
        }
      };
      return this;
    };
    Slider = function() {
      var btn_next, btn_prev, self, slideIndex, slide_room, slide_title, slider, slider_inner, top_margin, totalSlides;
      self = this;
      top_margin = 30;
      slider = $('#slider');
      slide_title = $('#slider .title');
      slide_room = $('#slider .slides');
      slider_inner = $('#slider .slider-inner');
      slideIndex = 0;
      totalSlides = 0;
      btn_next = $('#slider .btn-next');
      btn_prev = $('#slider .btn-prev');
      this.isHide = false;
      btn_next.on('click', function(e) {
        this.blur();
        return self.next();
      });
      btn_prev.on('click', function(e) {
        this.blur();
        return self.prev();
      });
      this.resize = function(e) {
        var _h, _w, el, i, len, p, ref, results;
        ref = slide_room.children();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          el = ref[i];
          el.style.maxHeight = '';
          el.style.maxWidth = '';
          _h = slider_inner.height() - top_margin;
          _w = slider_inner.width();
          if (_w > _h) {
            p = _h / _w;
            el.style.maxHeight = _h + "px";
            results.push(el.style.maxWidth = (_w * p) + "px");
          } else {
            p = _w / _h;
            el.style.maxHeight = (_h * p) + "px";
            results.push(el.style.maxWidth = _w + "px");
          }
        }
        return results;
      };
      this.slide = function(index) {
        var current, elements;
        elements = slide_room.children();
        current = slide_room.find('.current');
        if (current && elements.length > 0) {
          current.removeClass('current');
        }
        $(elements[index]).addClass('current');
      };
      this.next = function() {
        if (viewStatus !== 2 || self.isHide) {
          return;
        }
        if (slideIndex >= totalSlides - 1) {
          slideIndex = 0;
        } else {
          slideIndex += 1;
        }
        return self.slide(slideIndex);
      };
      this.prev = function() {
        if (viewStatus !== 2 || self.isHide) {
          return;
        }
        if (slideIndex <= 0) {
          slideIndex = totalSlides - 1;
        } else {
          slideIndex -= 1;
        }
        return self.slide(slideIndex);
      };
      this.show = function(elements, title) {
        if (currPage.attr('dark') !== null) {
          slider.addClass('dark');
        } else {
          slider.removeClass('dark');
        }
        slide_title.html(title || '');
        elements = elements.clone();
        slide_room.children().remove();
        slide_room.append(elements);
        $(elements[0]).addClass('current');
        slideIndex = 0;
        totalSlides = elements.length;
        self.resize();
        slider.addClass('open');
        return window.addEventListener('resize', self.resize);
      };
      this.hide = function() {
        slider.removeClass('open');
        return window.removeEventListener('resize', self.resize);
      };
      this.toggle = function() {
        if (slider.hasClass('open')) {
          return self.hide();
        } else {
          return self.show();
        }
      };
      return this;
    };
    Paginator = function() {
      var btn_next, btn_prev, ctrl, self;
      self = this;
      ctrl = $('#controller');
      btn_next = $('#controller .btn-next');
      btn_prev = $('#controller .btn-prev');
      btn_next.on('click', function(e) {
        self.next();
        return this.blur();
      });
      btn_prev.on('click', function(e) {
        self.prev();
        return this.blur();
      });
      this.isHide = false;
      this.hide = function() {
        btn_next.addClass('hide');
        return btn_prev.addClass('hide');
      };
      this.show = function() {
        if (viewStatus !== 0) {
          btn_prev.addClass('hide');
          btn_next.addClass('hide');
          return;
        }
        if (currDisplayIndex > 0) {
          btn_prev.removeClass('hide');
        } else {
          btn_prev.addClass('hide');
        }
        if (currDisplayIndex < totalPages - 1) {
          btn_next.removeClass('hide');
        } else {
          btn_next.addClass('hide');
        }
        if (currDisplayPage.attr('dark') !== null) {
          return ctrl.addClass('dark');
        } else {
          return ctrl.removeClass('dark');
        }
      };
      this.next = function() {
        if (viewStatus === 2) {
          return;
        }
        if (currPageIndex >= totalPages - 1) {
          return;
        }
        return page_slide(currPageIndex += 1);
      };
      this.prev = function() {
        if (viewStatus === 2) {
          return;
        }
        if (currPageIndex <= 0) {
          return;
        }
        return page_slide(currPageIndex -= 1);
      };
      this.toggle = function() {
        if (btn_next.hasClass('hide') || btn_prev.hasClass('hide')) {
          return self.show();
        } else {
          return self.hide();
        }
      };
      self.hide();
      self.show();
      return this;
    };
    pages = $('#pages > section:not([disabled])');
    for (i = 0, len = pages.length; i < len; i++) {
      page = pages[i];
      $(page).append('<label>' + page.title + '</label>');
    }
    totalPages = pages.length;
    if (totalPages > 0) {
      currPage = $(pages[0]);
    } else {
      currPage = null;
    }
    currPageIndex = 0;
    currDisplayIndex = 0;
    currDisplayPage = currPage;
    stopPagesAnim = function() {
      var timer;
      pages.addClass('no-transition');
      return timer = window.setTimeout(function() {
        pages.removeClass('no-transition');
        return window.clearTimeout(timer);
      }, 50);
    };
    window.addEventListener('resize', function(e) {
      stopPagesAnim();
      return page_slide(currPageIndex);
    });
    page_slide = function(curr) {
      var idx, j, len1, pos_left, screenWidth;
      if (!curr) {
        curr = 0;
      }
      screenWidth = $(document).width();
      currDisplayIndex = curr;
      for (j = 0, len1 = pages.length; j < len1; j++) {
        page = pages[j];
        idx = $(page).index();
        if (idx === curr) {
          currDisplayPage = currPage = $(page);
        }
        pos_left = screenWidth * (idx - curr);
        $(page).css({
          left: pos_left + 'px'
        });
      }
      headerCtrl.show();
      return paginatorCtrl.show();
    };
    page_move = function(mv, curr) {
      var idx, j, last_left, len1, pos_left, screenWidth;
      pages.addClass('on-moving');
      if (!mv) {
        return;
      }
      screenWidth = $(document).width();
      last_left = null;
      for (j = 0, len1 = pages.length; j < len1; j++) {
        page = pages[j];
        idx = $(page).index();
        pos_left = Math.round(screenWidth * idx + mv - (screenWidth * curr));
        $(page).css({
          left: pos_left + 'px'
        });
        if (!last_left || Math.abs(pos_left) < Math.abs(last_left)) {
          last_left = pos_left;
          currDisplayIndex = idx;
          currDisplayPage = $(page);
        }
      }
      pages.removeClass('on-moving');
      headerCtrl.show();
      return paginatorCtrl.show();
    };
    headerCtrl = new PrimaryHeader();
    paginatorCtrl = new Paginator();
    detailCtrl = new Detail();
    sliderCtrl = new Slider();
    $('#menu').on('click', function(e) {
      this.blur();
      headerCtrl.menu('close');
      $('#pages').toggleClass('zoom').removeClass('out');
      detailCtrl.hide();
      sliderCtrl.hide();
      if (viewStatus === 1) {
        $('#footer').removeClass('hide');
      } else {
        $('#footer').addClass('hide');
      }
      headerCtrl.show();
      paginatorCtrl.toggle();
    });
    $('.open-detail').on('click', function(e) {
      var detail_content, detail_element, detail_id;
      headerCtrl.menu('collapse');
      $('#pages').toggleClass('zoom').toggleClass('out');
      $('#footer').addClass('hide');
      detail_id = $(this).data('detail');
      if (detail_id) {
        detail_element = $('#' + detail_id + '[rel="detail"]');
      } else {
        detail_element = $(this).find('[rel="detail"]');
      }
      if (detail_element) {
        detail_content = detail_element.html();
      } else {
        detail_content = '';
      }
      detailCtrl.show(detail_content);
      paginatorCtrl.hide();
      headerCtrl.show();
    });
    $('.open-slider').on('click', function(e) {
      var slides, title;
      headerCtrl.menu('collapse');
      $('#pages').toggleClass('zoom').toggleClass('out');
      $('#footer').addClass('hide');
      slides = $(this).find('[rel="slides"]');
      title = slides.attr('title');
      if (!slides) {
        return;
      }
      sliderCtrl.show(slides.children(), title);
      paginatorCtrl.hide();
      headerCtrl.show();
      e.stopPropagation();
      return false;
    });
    cmd = {
      prev: function() {
        return paginatorCtrl.prev();
      },
      next: function() {
        return paginatorCtrl.next();
      },
      slide_prev: function() {
        return sliderCtrl.prev();
      },
      slide_next: function() {
        return sliderCtrl.next();
      },
      enter: function() {
        return $('#menu').trigger('click');
      },
      esc: function() {
        headerCtrl.menu();
        $('#pages').removeClass('zoom').removeClass('out');
        detailCtrl.hide();
        sliderCtrl.hide();
        $('#footer').addClass('hide');
        paginatorCtrl.show();
        return headerCtrl.show();
      }
    };
    $(document).on('keydown', function(e) {
      var ref, ref1, ref2;
      if ((ref = e.keyCode) === 37 || ref === 38) {
        if (viewStatus !== 2) {
          return cmd.prev();
        } else {
          return cmd.slide_prev();
        }
      } else if ((ref1 = e.keyCode) === 39 || ref1 === 40) {
        if (viewStatus !== 2) {
          return cmd.next();
        } else {
          return cmd.slide_next();
        }
      } else if ((ref2 = e.keyCode) === 13 || ref2 === 32) {
        return cmd.enter();
      } else if (e.keyCode === 27) {
        return cmd.esc();
      }
    });
    wheeltimer = null;
    $(document).on('wheel', function(e) {
      var move_to;
      move_to = Math.round(e.deltaY / 5);
      if (move_to === 0) {
        return;
      }
      if (wheeltimer) {
        window.clearTimeout(wheeltimer);
      }
      return wheeltimer = window.setTimeout(function() {
        if (viewStatus === 2) {
          if (move_to > 0) {
            return cmd.slide_next();
          } else {
            return cmd.slide_prev();
          }
        } else {
          if (move_to > 0) {
            return cmd.next();
          } else {
            return cmd.prev();
          }
        }
      }, 60);
    });
    touch_pages = document.getElementById('screen');
    touch_slider = document.getElementById('slider');
    touch_detail = document.getElementById('detail');
    mc = new Hammer(touch_pages);
    mc_slider = new Hammer(touch_slider);
    mc_slider.get('swipe').set({
      direction: Hammer.DIRECTION_ALL
    });
    mc_detail = new Hammer(touch_detail);
    mc_detail.get('swipe').set({
      direction: Hammer.DIRECTION_ALL
    });
    isTouchPan = function(target) {
      var item, j, len1, ref;
      ref = $('[no-touch-pan]');
      for (j = 0, len1 = ref.length; j < len1; j++) {
        item = ref[j];
        if ($.contains(item, target)) {
          return false;
        }
      }
      return true;
    };
    mc.on('panleft panright', function(e) {
      var _left, _right, move_to, recoup, screenWidth;
      if (viewStatus === 2 && isTouchPan(e.target)) {
        return;
      }
      if (viewStatus === 0) {
        recoup = 2;
      } else if (viewStatus === 1) {
        recoup = 4;
      }
      move_to = e.deltaX * recoup;
      screenWidth = $(document).width();
      if (move_to >= 0) {
        _left = currPageIndex * screenWidth + Math.ceil(screenWidth / 10);
        if (move_to > _left) {
          move_to = _left;
        }
      } else {
        _right = (currPageIndex - totalPages + 1) * screenWidth - Math.ceil(screenWidth / 10);
        if (move_to < _right) {
          move_to = _right;
        }
      }
      page_move(move_to, currPageIndex);
    });
    mc.on('panend', function(e) {
      if (viewStatus === 2 && isTouchPan(e.target)) {
        return;
      }
      currPageIndex = currDisplayIndex;
      page_slide(currPageIndex);
    });
    mc.on('tap pressup', function(e) {
      var index, next_page, ref;
      if (ref = e.target, indexOf.call(pages, ref) < 0) {
        return;
      }
      next_page = e.target;
      if (viewStatus !== 1 || !next_page) {
        return;
      }
      index = $(next_page).index();
      if (index === currPageIndex) {
        return $('#menu').trigger('click');
      } else {
        currPageIndex = index;
        return page_slide(currPageIndex);
      }
    });
    mc_slider.on('swipedown', function(e) {
      if (viewStatus !== 2) {
        return;
      }
      return cmd.esc();
    });
    mc_slider.on('swipeleft swiperight', function(e) {
      if (viewStatus !== 2) {
        return;
      }
      switch (e.type) {
        case 'swipeleft':
          cmd.slide_next();
          break;
        case 'swiperight':
          cmd.slide_prev();
      }
    });
    mc_detail.on('swipedown', function(e) {
      if (viewStatus !== 2) {
        return;
      }
      return cmd.esc();
    });
    leapLoopClock = 0;
    CD_TIMER = 30;
    leapController = Leap.loop({
      enableGestures: true
    }, function(frame) {
      var gesture, isHorizontal, swipeDirection;
      if (leapLoopClock > 0) {
        leapLoopClock--;
        return;
      }
      if (frame.valid && frame.gestures.length > 0) {
        gesture = frame.gestures[frame.gestures.length - 1];
        switch (gesture.type) {
          case 'circle':
            cmd.esc();
            leapLoopClock = CD_TIMER;
            break;
          case 'swipe':
            isHorizontal = Math.abs(gesture.direction[0]) > Math.abs(gesture.direction[1]);
            if (isHorizontal) {
              if (gesture.direction[0] > 0) {
                swipeDirection = 'right';
                cmd.prev();
              } else {
                swipeDirection = 'left';
                cmd.next();
              }
            } else {
              if (gesture.direction[1] > 0) {
                swipeDirection = 'up';
                cmd.esc();
              } else {
                swipeDirection = 'down';
                cmd.enter();
              }
            }
            console.log('Swipe Gesture', swipeDirection);
            leapLoopClock = CD_TIMER;
            break;
        }
      }
    });
    stopPagesAnim();
    page_slide();
    invl_id = window.setInterval(function(e) {
      var curr, idx, j, len1, next, swap, swapper;
      swapper = $('#swapper > *');
      idx = 0;
      for (j = 0, len1 = swapper.length; j < len1; j++) {
        swap = swapper[j];
        if ($(swap).hasClass('onswap')) {
          idx = $(swap).index();
          break;
        }
      }
      curr = swapper[idx];
      $(curr).removeClass('onswap');
      if (idx >= swapper.length - 1) {
        idx = 0;
      } else {
        idx++;
      }
      next = swapper[idx];
      return $(next).addClass('onswap');
    }, 3000);
    return loading_id = window.setTimeout(function(e) {
      $('#loader').addClass('hide');
      return window.clearTimeout(loading_id);
    }, 1200);
  });

}).call(this);
